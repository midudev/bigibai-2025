---
import "@/global.css"

import GradientOverlay from "@/components/GradientOverlay.astro"
import AnimatedBackground from "@/components/AnimatedBackground.astro"

const title = "Big Ibai: Calendario de Adviento con chocolates y premios"
const description =
  "Participa en el calendario de adviento de Big Ibai y gana chocolates y premios increíbles cada día."
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title>{title}</title>

    <link
      rel="preload"
      href="/fonts/century.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />
    <link
      rel="preload"
      href="/fonts/century-bold.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />
    <link
      rel="preload"
      href="/fonts/heavy.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />

    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="description" content={description} />
    <meta name="keywords" content="bigibai" />
    <meta name="author" content="Ibai Llanos" />

    <meta name="og:title" content={title} />
    <meta name="og:description" content={description} />
    <meta name="og:image" content="https://www.bigibai.com/og.jpg" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:creator" content="@IbaiLlanos" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content="https://www.bigibai.com/og.jpg" />
    <meta name="twitter:image:alt" content={title} />
    <meta name="theme-color" content="#4c2d7e" />

    <link rel="icon" href="/cropped-favicon-32x32.png" sizes="32x32" />
    <link rel="icon" href="/cropped-favicon-192x192.png" sizes="192x192" />
    <link rel="apple-touch-icon" href="/cropped-favicon-180x180.png" />
    <meta
      name="msapplication-TileImage"
      content="/cropped-favicon-270x270.png"
    />
  </head>
  <body>
    <AnimatedBackground />
    <div id="background-mask" class="min-h-screen w-full">
      <GradientOverlay />
      <div class="floating-particles"></div>
      <div class="relative z-2">
        <slot />
      </div>
    </div>
  </body>
</html>

<style>
  body {
    background: #000;
    overflow-x: hidden;
  }

  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
  }

  /* Prevent scrolling during initial animations */
  body.loading {
    overflow: hidden;
  }

  #background-mask {
    background-image: url("/fondo.webp");
    background-size: cover;
    background-position: top;
    background-repeat: no-repeat;

    mask-image: url("/lock.svg");
    mask-position: center 50%;
    mask-repeat: no-repeat;
    mask-size: 50px;

    &.unlocked {
      animation: lock-reveal 3s forwards ease-in-out;
    }
  }

  @keyframes lock-reveal {
    0% {
      mask-size: 50px;
    }

    100% {
      mask-size: 1000vh;
    }
  }

  .floating-particles {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 1;
    opacity: 0.3;
  }

  .floating-particles::before,
  .floating-particles::after {
    content: '';
    position: absolute;
    width: 200px;
    height: 200px;
    border-radius: 50%;
    background: radial-gradient(circle, rgba(248, 177, 52, 0.15) 0%, transparent 70%);
    filter: blur(40px);
    animation: float-particle 20s ease-in-out infinite;
  }

  .floating-particles::before {
    top: 20%;
    left: 10%;
    animation-delay: 0s;
  }

  .floating-particles::after {
    bottom: 20%;
    right: 10%;
    animation-delay: -10s;
  }

  @keyframes float-particle {
    0%, 100% {
      transform: translate(0, 0) scale(1);
    }
    25% {
      transform: translate(30px, -30px) scale(1.1);
    }
    50% {
      transform: translate(-20px, 40px) scale(0.9);
    }
    75% {
      transform: translate(40px, 20px) scale(1.05);
    }
  }

  /* Smooth parallax scrolling */
  @media (prefers-reduced-motion: no-preference) {
    #background-mask {
      transition: transform 0.1s ease-out;
    }
  }
</style>

<script>
  const backgroundMask = document.getElementById(
    "background-mask"
  ) as HTMLDivElement;

  // Subtle parallax effect when moving the mouse
  let mouseX = 0,
      mouseY = 0,
      currentX = 0,
      currentY = 0;

  // Prevent scrolling during initial animations
  document.body.classList.add('loading');

  document.addEventListener("DOMContentLoaded", () => {
    backgroundMask.classList.add("unlocked");
    
    // Remove the loading class after the initial animations finish.
    setTimeout(() => {
      document.body.classList.remove('loading');
    }, 1500)
  })

  document.addEventListener("mousemove", (e) => {
    mouseX = (e.clientX / window.innerWidth - 0.5) * 20;
    mouseY = (e.clientY / window.innerHeight - 0.5) * 20;
  })

  function animate() {
    const ease = 0.05;

    currentX += (mouseX - currentX) * ease;
    currentY += (mouseY - currentY) * ease;

    if (backgroundMask) {
      const particles = document.querySelector('.floating-particles') as HTMLElement;
      if (particles) {
        particles.style.transform = `translate(${currentX}px, ${currentY}px)`;
      }
    }

    requestAnimationFrame(animate)
  }

  if (window.matchMedia('(prefers-reduced-motion: no-preference)').matches) {
    animate()
  }
</script>

<script>
  import { initScrollAnimations, initParallaxEffect, init3DHoverEffect } from '@/utils/animations'
  
  // Initialize animations
  document.addEventListener('DOMContentLoaded', () => {
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches
    
    if (!prefersReducedMotion) {
      initScrollAnimations()
      initParallaxEffect()
      init3DHoverEffect()
    }
  })
</script>
