---
import { actions } from 'astro:actions'
import Button from '@/components/Button.astro'
import SpinnerIcon from '@/icons/spinner.svg'
---

<style>
  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  @keyframes shimmer {
    0% {
      background-position: 0% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }

  @keyframes shake {
    0%,
    100% {
      transform: translateX(0);
    }
    25% {
      transform: translateX(-5px);
    }
    75% {
      transform: translateX(5px);
    }
  }

  @keyframes bounce-in {
    0% {
      opacity: 0;
      transform: scale(0.3) translateY(-20px);
    }
    50% {
      opacity: 1;
      transform: scale(1.05);
    }
    70% {
      transform: scale(0.95);
    }
    100% {
      transform: scale(1) translateY(0);
    }
  }

  @keyframes pulse-ring {
    0% {
      box-shadow: 0 0 0 0 rgba(248, 177, 52, 0.7);
    }
    70% {
      box-shadow: 0 0 0 10px rgba(248, 177, 52, 0);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(248, 177, 52, 0);
    }
  }

  .spinner {
    animation: spin 1s linear infinite;
  }

  .form-input {
    transition: all 0.3s ease;
    position: relative;
  }

  .form-input:focus {
    transform: translateY(-2px);
    box-shadow: 0 10px 30px -10px rgba(248, 177, 52, 0.5);
  }

  .submit-button {
    position: relative;
    overflow: hidden;
    background: linear-gradient(90deg, #f8b134 25%, #ffd700 50%, #f8b134 75%) !important;
    background-size: 300% 100% !important;
    animation: shimmer 3s linear infinite;
  }

  .submit-button:hover {
    animation: shimmer 1.5s linear infinite;
  }

  .submit-button:active {
    animation: none;
  }

  .error-shake {
    animation: shake 0.5s ease-in-out;
  }

  .success-bounce {
    animation: bounce-in 0.6s ease-out;
  }

  .pulse-effect {
    animation: pulse-ring 1.5s cubic-bezier(0.215, 0.61, 0.355, 1) infinite;
  }

  .message-container {
    transition: all 0.3s ease;
    min-height: 24px;
  }
</style>

<section class="w-full max-w-xl mx-auto fade-in-up">
  <form method="POST" id="newsletter-form" class="flex flex-col gap-4" action={actions.newsletter}>
    <div class="flex flex-col sm:flex-row gap-3">
      <label for="email" class="sr-only">Correo electrónico</label>
      <input
        required
        type="email"
        name="email"
        id="email"
        autocomplete="email"
        inputmode="email"
        aria-required="true"
        aria-describedby="newsletter-message"
        class="flex-1 px-4 py-3 rounded-lg bg-black/50 border border-brand/50 backdrop-blur-lg text-white placeholder:text-white/50 focus:outline-none focus:ring-2 focus:ring-brand focus:border-transparent transition-all"
        placeholder="Contenido exclusivo sólo para los reals"
      />
      <Button
        type="submit"
        id="submit-button"
        variant="brand"
        size="lg"
        class="submit-button relative cursor-pointer"
      >
        <span id="button-text">¡Avísame!</span>
        <span id="button-loader" class="absolute inset-0 items-center justify-center hidden">
          <SpinnerIcon class="spinner h-5 w-5 text-black" />
        </span>
      </Button>
    </div>

    <div class="relative">
      <div
        id="newsletter-message"
        class="invisible bg-gradient-to-bl peer from-yellow-400 font-semibold to-orange-300 shadow shadow-amber-200 block px-5 py-2 ring-4 ring-white/20 text-sm transition duration-300 hover:scale-105 cursor-crosshair text-center opacity-0 mx-10 rounded-lg translate-y-3 scale-90 relative"
      >
      </div>

      <img
        id="newsletter-icon"
        src="https://static.vecteezy.com/system/resources/previews/009/380/248/non_2x/royal-crown-clipart-design-illustration-free-png.png"
        alt=""
        class="size-8 peer-hover:scale-105 transition duration-300 peer-hover:-translate-x-3 peer-hover:-translate-y-1 peer-hover:-rotate-[40deg] invisible drop-shadow-sm drop-shadow-amber-700 -rotate-45 aspect-square object-contain absolute -top-2.5 left-5 z-10"
      />
    </div>
  </form>
</section>

<script>
  import { actions, isInputError } from 'astro:actions'
  import { throwConfetti } from '@/utils/confetti'

  const form = document.getElementById('newsletter-form') as HTMLFormElement
  const message = document.getElementById('newsletter-message') as HTMLDivElement
  const newsletterToastIcon = document.getElementById('newsletter-icon') as HTMLImageElement
  const submitButton = document.getElementById('submit-button') as HTMLButtonElement
  const buttonText = document.getElementById('button-text') as HTMLSpanElement
  const buttonLoader = document.getElementById('button-loader') as HTMLSpanElement
  let hideTimer: number | null = null

  message.classList.add('invisible')
  message.classList.remove('text-white', 'text-black')

  const input = form.querySelector("input[name='email']") as HTMLInputElement

  input.addEventListener('focus', () => {
    message.classList.add('invisible')
    newsletterToastIcon.classList.add('invisible')
    message.classList.remove(
      'opacity-100',
      'translate-y-0',
      'scale-100',
      'text-white',
      'text-black',
      'from-red-400',
      'to-pink-600',
      'shadow',
      'shadow-pink-400'
    )
    message.classList.remove('translate-y-0')
    message.classList.remove('scale-100')
    message.classList.remove('text-white', 'text-black')
    message.classList.remove('from-red-400', 'to-pink-600', 'shadow', 'shadow-pink-400')
    newsletterToastIcon.src = '/crown.webp'
    newsletterToastIcon.classList.add('invisible')
    newsletterToastIcon.classList.remove('animate-shake')
    newsletterToastIcon.classList.add('-rotate-45')
    newsletterToastIcon.classList.remove('hover:-rotate-12')
    newsletterToastIcon.classList.add('hover:-rotate-[40deg]')
    message.textContent = ''
    input.removeAttribute('aria-invalid')
    message.removeAttribute('role')
    message.setAttribute('aria-live', 'polite')
  })

  const clearHideTimer = () => {
    if (hideTimer !== null) {
      clearTimeout(hideTimer)
      hideTimer = null
    }
  }

  const hideMessage = () => {
    clearHideTimer()
    message.textContent = ''
    message.classList.add('invisible')
    newsletterToastIcon.classList.add('invisible')
    message.classList.remove('text-red-500', 'text-green-500', 'error-shake', 'success-bounce')
    message.removeAttribute('role')
    message.setAttribute('aria-live', 'polite')
    input.removeAttribute('aria-invalid')
    try {
      message.removeAttribute('tabindex')
    } catch {}
  }

  const showMessage = (type: 'error' | 'success', text: string) => {
    clearHideTimer()

    message.textContent = text

    if (type === 'error') {
      message.classList.remove('invisible')
      message.classList.remove('from-yellow-400', 'to-orange-300', 'shadow', 'shadow-amber-200')
      newsletterToastIcon.src =
        'https://png.pngtree.com/png-clipart/20250421/original/pngtree-cross-icon-wrong-sign-vector-with-transparent-background-png-image_20826131.png'
      newsletterToastIcon.classList.remove('invisible')
      newsletterToastIcon.classList.add('animate-shake')
      newsletterToastIcon.addEventListener('animationend', () => {
        newsletterToastIcon.classList.remove('animate-shake')
      })
      newsletterToastIcon.classList.remove('-rotate-45')
      newsletterToastIcon.classList.remove('hover:-rotate-[40deg]')
      newsletterToastIcon.classList.add('hover:-rotate-12')

      message.classList.add('opacity-100')
      message.classList.add('translate-y-0')
      message.classList.add('scale-100')
      message.classList.add(
        'from-red-400',
        'to-pink-600',
        'shadow',
        'shadow-pink-400',
        'text-white'
      )
    } else {
      message.classList.remove('invisible')
      message.classList.add('opacity-100')
      message.classList.add('translate-y-0')
      message.classList.add('scale-100')
      message.classList.add('text-black')

      message.classList.add('from-yellow-400', 'to-orange-300', 'shadow', 'shadow-amber-200')
      newsletterToastIcon.classList.remove('invisible')
      message.setAttribute('tabindex', '-1')
      ;(message as HTMLDivElement).focus()
    }

    // Hide message after 10 seconds
    hideTimer = window.setTimeout(() => {
      hideMessage()
    }, 10 * 1000)
  }

  form.addEventListener('submit', async (event) => {
    console.log('submit')

    event.preventDefault()

    // Activate charging status
    submitButton.disabled = true
    submitButton.setAttribute('aria-busy', 'true')
    submitButton.classList.add('pulse-effect')
    buttonText.classList.add('invisible')
    buttonLoader.classList.remove('hidden')
    buttonLoader.classList.add('flex')

    const formData = new FormData(form)
    const email = formData.get('email') as string

    const { data, error } = await actions.newsletter({ email })

    // Disable charging status
    submitButton.disabled = false
    submitButton.setAttribute('aria-busy', 'false')
    submitButton.classList.remove('pulse-effect')
    buttonText.classList.remove('invisible')
    buttonLoader.classList.add('hidden')
    buttonLoader.classList.remove('flex')

    if (error) {
      const messageText = isInputError(error) ? error?.fields?.email?.join(', ') : error.message
      showMessage('error', messageText ?? 'Error al guardar el email en la newsletter')
      return
    }

    if (data) {
      throwConfetti()
      showMessage('success', data.message)
      form.reset()
      return
    }
  })
</script>
