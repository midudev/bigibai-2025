---
import { actions } from "astro:actions"
---

<style>
  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
  
  .spinner {
    animation: spin 1s linear infinite;
  }
</style>

<section class="w-full max-w-xl mx-auto">
  <form
    method="POST"
    id="newsletter-form"
    class="flex flex-col gap-4"
    action={actions.newsletter}
  >
    <div class="flex flex-col sm:flex-row gap-3">
      <input
        required
        type="email"
        name="email"
        class="flex-1 px-4 py-3 rounded-lg bg-black/50 border border-brand/50 backdrop-blur-lg text-white placeholder:text-white/50 focus:outline-none focus:ring-2 focus:ring-brand focus:border-transparent transition-all"
        placeholder="Contenido exclusivo sólo para los reels"
      />
      <button
        type="submit"
        id="submit-button"
        class="px-6 py-3 bg-brand hover:bg-yellow-400 text-black font-bold rounded-lg transition-all hover:scale-105 active:scale-95 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 relative"
      >
        <span id="button-text">¡Avísame!</span>
        <span id="button-loader" class="hidden absolute inset-0 flex items-center justify-center">
          <svg class="spinner h-5 w-5 text-black" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </span>
      </button>
    </div>

    <div id="newsletter-message" class="invisible block h-6 leading-6 text-sm text-center text-brand">
      ¡Ya eres parte de la newsletter!
    </div>
  </form>
</section>

<script>
  import { actions, isInputError } from "astro:actions"
  import { throwConfetti } from "@/utils/confetti"

  const form = document.getElementById("newsletter-form") as HTMLFormElement
  const message = document.getElementById(
    "newsletter-message"
  ) as HTMLDivElement
  const submitButton = document.getElementById("submit-button") as HTMLButtonElement
  const buttonText = document.getElementById("button-text") as HTMLSpanElement
  const buttonLoader = document.getElementById("button-loader") as HTMLSpanElement

  message.classList.add("invisible")
  message.classList.remove("text-red-500", "text-green-500")

  const input = form.querySelector("input[name='email']") as HTMLInputElement

  input.addEventListener("focus", () => {
    message.classList.add("invisible")
    message.classList.remove("text-red-500", "text-green-500")
    message.textContent = ""
  })

  form.addEventListener("submit", async (event) => {
    console.log("submit")

    event.preventDefault()

    // Activar estado de carga
    submitButton.disabled = true
    buttonText.classList.add("invisible")
    buttonLoader.classList.remove("hidden")

    const formData = new FormData(form)
    const email = formData.get("email") as string

    const { data, error } = await actions.newsletter({ email })

    // Desactivar estado de carga
    submitButton.disabled = false
    buttonText.classList.remove("invisible")
    buttonLoader.classList.add("hidden")

    if (error) {
      const messageText = isInputError(error)
        ? error?.fields?.email?.join(", ")
        : error.message

      message.textContent =
        messageText ?? "Error al guardar el email en la newsletter"
      message.classList.remove("invisible")
      message.classList.add("text-red-500")
    }

    if (data) {
      throwConfetti()
      message.textContent = data.message
      message.classList.remove("invisible")
      message.classList.add("text-green-500")
      form.reset()
    }
  })
</script>
